// Generated by CoffeeScript 1.8.0
var Alarm, Contact, CozyInstance, Event, User, async, time;

time = require('time');

async = require('async');

CozyInstance = require('../models/cozy_instance');

Alarm = require('../models/alarm');

Event = require('../models/event');

Contact = require('../models/contact');

User = require('../models/user');

module.exports.tags = function(req, res, next) {
  return async.parallel([Event.tags, Alarm.tags], function(err, results) {
    if (err) {
      return next(err);
    }
    return res.send({
      calendars: results[0].calendar.concat(results[1].calendar),
      tags: results[0].tag.concat(results[1].tag)
    });
  });
};

module.exports.index = function(req, res) {
  return async.parallel([
    (function(_this) {
      return function(cb) {
        return Contact.all(function(err, contacts) {
          var contact, index, _i, _len;
          if (err) {
            return cb(err);
          }
          for (index = _i = 0, _len = contacts.length; _i < _len; index = ++_i) {
            contact = contacts[index];
            contacts[index] = contact.asNameAndEmails();
          }
          return cb(null, contacts);
        });
      };
    })(this), Alarm.all, Event.all, (function(_this) {
      return function(cb) {
        return CozyInstance.getLocale(function(err, locale) {
          if (err) {
            console.log(err);
          }
          return cb(null, locale);
        });
      };
    })(this)
  ], (function(_this) {
    return function(err, results) {
      var alarms, contacts, events, locale;
      if (err) {
        return res.send({
          error: 'Server error occurred while retrieving data',
          stack: err.stack
        });
      } else {
        contacts = results[0], alarms = results[1], events = results[2], locale = results[3];
        return res.render('index.jade', {
          imports: "window.locale = \"" + locale + "\";\nwindow.initalarms = " + (JSON.stringify(alarms)) + ";\nwindow.initevents = " + (JSON.stringify(events)) + ";\nwindow.initcontacts = " + (JSON.stringify(contacts)) + ";"
        });
      }
    };
  })(this));
};

module.exports.userTimezone = function(req, res) {
  if (req.query.keys !== "timezone") {
    return res.send("keys not exposed", 403);
  } else {
    return res.send(User.timezone);
  }
};
