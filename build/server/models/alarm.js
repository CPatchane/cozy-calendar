// Generated by CoffeeScript 1.8.0
var Alarm, Event, User, americano, log, moment;

americano = require('americano-cozy');

moment = require('moment-timezone');

Event = require('./event');

log = require('printit')({
  prefix: 'alarm:model'
});

User = require('./user');

module.exports = Alarm = americano.getModel('Alarm', {
  action: {
    type: String,
    "default": 'DISPLAY'
  },
  trigg: {
    type: String
  },
  description: {
    type: String
  },
  timezone: {
    type: String
  },
  rrule: {
    type: String
  },
  tags: {
    type: function(x) {
      return x;
    }
  },
  related: {
    type: String,
    "default": null
  },
  created: {
    type: String
  },
  lastModification: {
    type: String
  }
});

Alarm.all = function(params, callback) {
  return Alarm.request("all", params, callback);
};

Alarm.tags = function(callback) {
  return Alarm.rawRequest("tags", {
    group: true
  }, function(err, results) {
    var out, result, tag, type, _i, _len, _ref;
    if (err) {
      return callback(err);
    }
    out = {
      calendar: [],
      tag: []
    };
    for (_i = 0, _len = results.length; _i < _len; _i++) {
      result = results[_i];
      _ref = result.key, type = _ref[0], tag = _ref[1];
      out[type].push(tag);
    }
    return callback(null, out);
  });
};

Alarm.createOrGetIfImport = function(data, callback) {
  if (data["import"]) {
    return Alarm.request('byDate', {
      key: data.trigg
    }, function(err, alarms) {
      if (err) {
        log.error(err);
        return Alarm.create(data, callback);
      } else if (alarms.length === 0) {
        return Alarm.create(data, callback);
      } else if (data.description === alarms[0].description) {
        log.warn('Alarm already exists, it was not created.');
        return callback(null, alarms[0]);
      } else {
        return Alarm.create(data, callback);
      }
    });
  } else {
    return Alarm.create(data, callback);
  }
};

Alarm.prototype.getAttendeesEmail = function() {
  return [User.email];
};

Alarm.prototype.migrateDoctype = function() {
  var body, end;
  end = moment(this.start).format('YYYY-MM-DD');
  body = {
    start: this.start,
    end: end,
    description: this.description,
    place: '',
    rrule: '',
    tags: this.tags,
    alarms: {
      id: 1,
      trigg: '-PT10M',
      action: 'DISPLAY'
    },
    created: moment().tz('UTC').toISOString(),
    lastModification: moment().tz('UTC').toISOString()
  };
  return Event.create(body, (function(_this) {
    return function() {
      return _this.destroy();
    };
  })(this));
};

Alarm.migrateAll = function() {
  return Alarm.all({}, function(err, alarms) {
    var alarm, _i, _len, _results;
    if (err) {
      console.log(err);
      return;
    }
    _results = [];
    for (_i = 0, _len = alarms.length; _i < _len; _i++) {
      alarm = alarms[_i];
      _results.push(alarm.migrateDoctype());
    }
    return _results;
  });
};
