// Generated by CoffeeScript 1.7.1
var Event, User, americano, momentTz;

americano = require('americano-cozy');

momentTz = require('moment-timezone');

User = require('./user');

module.exports = Event = americano.getModel('Event', {
  start: {
    type: String
  },
  end: {
    type: String
  },
  place: {
    type: String
  },
  details: {
    type: String
  },
  description: {
    type: String
  },
  rrule: {
    type: String
  },
  tags: {
    type: function(x) {
      return x;
    }
  },
  attendees: {
    type: [Object]
  },
  related: {
    type: String,
    "default": null
  },
  timezone: {
    type: String
  },
  alarms: {
    type: [Object]
  }
});

Event.dateFormat = 'YYYY-MM-DD';

Event.ambiguousDTFormat = 'YYYY-MM-DDTHH:mm:00.000';

Event.utcDTFormat = 'YYYY-MM-DDTHH:mm:00.000Z';

Event.alarmTriggRegex = /(\+?|-)PT?(\d+)(W|D|H|M|S)/;

require('cozy-ical').decorateEvent(Event);

Event.all = function(params, callback) {
  return Event.request("all", params, callback);
};

Event.tags = function(callback) {
  return Event.rawRequest("tags", {
    group: true
  }, function(err, results) {
    var out, result, tag, type, _i, _len, _ref;
    if (err) {
      return callback(err);
    }
    out = {
      calendar: [],
      tag: []
    };
    for (_i = 0, _len = results.length; _i < _len; _i++) {
      result = results[_i];
      _ref = result.key, type = _ref[0], tag = _ref[1];
      out[type].push(tag);
    }
    return callback(null, out);
  });
};

Event.createOrGetIfImport = function(data, callback) {
  if (data["import"]) {
    return Event.request('byDate', {
      key: data.start
    }, function(err, events) {
      if (err) {
        console.log(err);
        return Event.create(data, callback);
      } else if (events.length === 0) {
        return Event.create(data, callback);
      } else if (data.description === events[0].description) {
        log.warn('Event already exists, it was not created.');
        return callback(null, events[0]);
      } else {
        return Event.create(data, callback);
      }
    });
  } else {
    return Event.create(data, callback);
  }
};

Event.prototype.formatStart = function(dateFormat) {
  var date;
  if (this.rrule) {
    date = momentTz.tz(this.start, this.timezone).format(dateFormat);
    date += ' ' + this.timezone;
  } else {
    date = momentTz.tz(this.start, User.timezone).format(dateFormat);
  }
  return date;
};

Event.prototype.getGuest = function(key) {
  var currentguest, guests, _ref;
  guests = ((_ref = this.attendees) != null ? _ref.toJSON() : void 0) || [];
  currentguest = guests.filter(function(guest) {
    return guest.key === key;
  })[0];
  if (currentguest) {
    currentguest.setStatus = (function(_this) {
      return function(status, callback) {
        currentguest.status = status;
        return _this.updateAttributes({
          attendees: guests
        }, callback);
      };
    })(this);
  }
  return currentguest;
};

Event.prototype.alarmAttendee = function() {
  return ["mailto:" + User.email];

  /* Constraints an alarm of alarms
      * All types
          action{1} : in [AUDIO, DISPLAY, EMAIL, PROCEDURE]
          trigger{1} : when the alarm is triggered
  
  
      * Display
          description{1} : text to display when alarm is triggered
          (
              duration
              repeat
          )?
  
      * Email
          summary{1} : email title
          description{1} : email content
          attendee+ : email addresses the message should be sent to
          attach* : message attachments
  
      * Audio
          (
              duration
              repeat
          )?
  
          attach? : sound resource (base-64 encoded binary or URL)
  
      * Proc
          attach{1} : procedure resource to be invoked
          (
              duration
              repeat
          )?
          description?
   */
};
